import os

import asyncpg.connection
from aiogram import F, Router, types
from aiogram.filters import Command, StateFilter, Text
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import default_state
from aiogram.types import (CallbackQuery, ContentType, Message,
                           ReplyKeyboardRemove)
from dotenv import load_dotenv

from config import bot
from FSM import FSM
from keyboards.keyboards import create_kb, create_pagination_kb
from services.services import (add_dish_to_favorites, check_count_recipes,
                               delete_recipe, get_favorite_recipe,
                               get_list_of_dishes, get_premium, get_recipe)

load_dotenv()
router = Router()

# buy
@router.callback_query(~StateFilter(default_state), Text(text='–û—Ñ–æ—Ä–º–∏—Ç—å Premium –¥–æ—Å—Ç—É–ø üíé'))
async def buy(callback: CallbackQuery):
    await callback.answer()
    PRICE = types.LabeledPrice(label="Premium –¥–æ—Å—Ç—É–ø", amount=100 * 100)  # –≤ –∫–æ–ø–µ–π–∫–∞—Ö (—Ä—É–±)
    await bot.send_invoice(callback.message.chat.id,
                           title="–ê–∫—Ç–∏–≤–∞—Ü–∏—è Premium –¥–æ—Å—Ç—É–ø–∞",
                           description="–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã Premium –¥–æ—Å—Ç—É–ø –±—É–¥–µ—Ç –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –±–µ—Å—Å—Ä–æ—á–Ω–æ.",
                           provider_token=os.getenv('PAYMENTS_TOKEN'),
                           currency="rub",
                           is_flexible=False,
                           prices=[PRICE],
                           start_parameter="subscription",
                           payload="test-invoice-payload")


@router.pre_checkout_query(lambda query: True)
async def pre_checkout_query(pre_checkout_q: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_q.id, ok=True)


# successful payment
@router.message(F.successful_payment)
async def successful_payment(message: types.Message, conn: asyncpg.connection.Connection):
    await get_premium(message.from_user.id, conn)
    await message.answer(f"<b>Premium</b> –¥–æ—Å—Ç—É–ø —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!!!\n\n"
                         f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!",
                         reply_markup=create_kb(1, '–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–µ—Ü–µ–ø—Ç–∞–º üìÉ',
                                                   '–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –±–ª—é–¥–æ üç≤'))


@router.callback_query(Text(text=['–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –±–ª—é–¥–æ üç≤',
                            '–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–æ–∏—Å–∫—É –¥—Ä—É–≥–∏—Ö –±–ª—é–¥ üç≤']), ~StateFilter(default_state))
async def select_dishes(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.clear()
    await state.set_state(FSM.find_dishes)
    await callback.message.edit_text('–ù–∞–ø–∏—à–∏ –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª—é–±–æ–≥–æ –±–ª—é–¥–∞ –∏ —è –Ω–∞–π–¥—É '
                         '–¥–ª—è —Ç–µ–±—è –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –¥–ª—è –µ–≥–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è!')



@router.callback_query(Text(text=['–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ä–µ—Ü–µ–ø—Ç üìÉ',
                            '–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–µ—Ü–µ–ø—Ç–∞–º üìÉ']), ~StateFilter(default_state))
async def back_dishes(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    data = await state.get_data()
    await callback.message.edit_text('–í–æ—Ç —á—Ç–æ –º–Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏!',
                                     reply_markup=create_kb(1, '–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –±–ª—é–¥–æ üç≤', **data['titles']))


@router.message(StateFilter(FSM.find_dishes))
async def list_of_dishes(message: Message, state: FSMContext):
    data = await get_list_of_dishes(message.text)
    if data:
        await state.update_data(data)
        await message.answer('–í–æ—Ç —á—Ç–æ –º–Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏!',
                             reply_markup=create_kb(1, '–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –±–ª—é–¥–æ üç≤', **data['titles']))
        await state.set_state(FSM.get_recipe)
    else:
        await message.answer('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –ø–æ –¥–∞–Ω–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑...')
        await state.set_state(FSM.find_dishes)


@router.callback_query(StateFilter(FSM.get_recipe), Text(text='–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ ‚ù§'))
async def add_to_favorites(callback: CallbackQuery, state: FSMContext, conn: asyncpg.connection.Connection):
    await callback.answer()
    if await check_count_recipes(callback.from_user.id, conn):
        data = await state.get_data()
        result = await add_dish_to_favorites(callback.from_user.id, data['current_dish'],  data['recipe'], conn)
        if result:
            await callback.message.answer('–†–µ—Ü–µ–ø—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!',
                                          reply_markup=create_kb(1, '–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ä–µ—Ü–µ–ø—Ç üìÉ',
                                                                 '–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –±–ª—é–¥–æ üç≤'))
        else:
            await callback.message.answer('–î–∞–Ω–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ –≤–∞—à–∏—Ö –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤!',
                                          reply_markup=create_kb(1, '–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ä–µ—Ü–µ–ø—Ç üìÉ',
                                                                 '–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –±–ª—é–¥–æ üç≤'))
    else:
        await callback.message.answer('–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –±–æ–ª–µ–µ 10-—Ç–∏ —Ä–µ—Ü–µ–ø—Ç–æ–≤, '
                                      '—á—Ç–æ–±—ã –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –æ—Ñ–æ—Ä–º–∏—Ç–µ '
                                      '<b>Premium –¥–æ—Å—Ç—É–ø!</b>',
                                      reply_markup=create_kb(1, '–û—Ñ–æ—Ä–º–∏—Ç—å Premium –¥–æ—Å—Ç—É–ø üíé',
                                                             '–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ä–µ—Ü–µ–ø—Ç üìÉ',
                                                             '–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –±–ª—é–¥–æ üç≤'))


@router.callback_query(StateFilter(FSM.get_recipe))
async def recipe(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    data = await state.get_data()
    recipe = await get_recipe(data['dishes'].get(callback.data), data['titles'].get(callback.data))
    data['recipe'] = recipe
    data['current_dish'] = data['titles'][callback.data]
    await state.update_data(data)
    if recipe:
        await callback.message.edit_text(f'{recipe}', reply_markup=create_kb(1, '–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ä–µ—Ü–µ–ø—Ç üìÉ',
                                                                             '–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ ‚ù§'))
    else:
        await callback.message.edit_text('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞... –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ä–µ—Ü–µ–ø—Ç',
                             reply_markup=create_kb(1, '–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –±–ª—é–¥–æ üç≤', **data['titles']))


@router.callback_query(StateFilter(FSM.favorites), Text(text=['–ò–∑–±—Ä–∞–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã ‚ù§',
                                                        'back',
                                                        'forward']))
async def all_favorites(callback: CallbackQuery, state: FSMContext, conn: asyncpg.connection.Connection):
    await callback.answer()
    data = await state.get_data()
    favorites_dishes = data['favorites_dishes']
    if callback.data in ['back', 'forward']:
        data['page'] = data['page'] - 1 if callback.data == 'back' else data['page'] + 1
    page = data['page']
    await state.update_data(data)
    await callback.message.edit_text(f'–í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã ‚ù§',
                         reply_markup=create_pagination_kb(1, page, favorites_dishes,
                                                           '–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–æ–∏—Å–∫—É –¥—Ä—É–≥–∏—Ö –±–ª—é–¥ üç≤'))


@router.callback_query(StateFilter(FSM.favorites), Text(text='–£–¥–∞–ª–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö üóë'))
async def delete_recipe_handler(callback: CallbackQuery, state: FSMContext, conn: asyncpg.connection.Connection):
    data = await state.get_data()
    await delete_recipe(callback.from_user.id, data, conn)
    # await state.update_data(data)
    await callback.message.edit_text('–†–µ—Ü–µ–ø—Ç —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö!\n\n'
                                     '–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∏–∑–±—Ä–∞–Ω–Ω—ã–º —Ä–µ—Ü–µ–ø—Ç–∞–º - \n/favorites',
                                     reply_markup=create_kb(1,
                                                            '–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–æ–∏—Å–∫—É –¥—Ä—É–≥–∏—Ö –±–ª—é–¥ üç≤'))


@router.callback_query(StateFilter(FSM.favorites))
async def favorite_recipe(callback: CallbackQuery, state: FSMContext, conn: asyncpg.connection.Connection):
    await callback.answer()
    data = await state.get_data()
    data['favorite_dish_id'] = callback.data
    await state.update_data(data)
    recipe = await get_favorite_recipe(callback.data, conn)
    await callback.message.edit_text(recipe,
                                     reply_markup=create_kb(1,
                                                            '–£–¥–∞–ª–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö üóë',
                                                            '–ò–∑–±—Ä–∞–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã ‚ù§'))







