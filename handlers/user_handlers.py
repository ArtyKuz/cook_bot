from aiogram import Router, F
from aiogram.filters import Command, Text, StateFilter
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from FSM import FSM
from aiogram.fsm.state import default_state
from services.services import get_list_of_dishes, get_recipe
from keyboards.keyboards import create_kb


router = Router()


@router.message(F.text == '–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –±–ª—é–¥–æ üç≤', ~StateFilter(default_state))
async def select_dishes(message: Message, state: FSMContext):
    await state.clear()
    await message.answer('–ù–∞–ø–∏—à–∏ –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–∫–æ–≥–æ-–Ω–∏–±—É–¥—å –±–ª—é–¥–∞ –∏ —è –Ω–∞–π–¥—É '
                         '–¥–ª—è —Ç–µ–±—è –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –¥–ª—è –µ–≥–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è!', reply_markup=ReplyKeyboardRemove)
    await state.set_state(FSM.find_dishes)


@router.message(F.text == '–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ä–µ—Ü–µ–ø—Ç üìÉ', ~StateFilter(default_state))
async def back_dishes(message: Message, state: FSMContext):
    data = await state.get_data()
    await message.answer('–í–æ—Ç —á—Ç–æ –º–Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏!', reply_markup=create_kb(1, *data, '–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ '
                                                                                                      '–±–ª—é–¥–æ üç≤'))


@router.message(StateFilter(FSM.find_dishes))
async def list_of_dishes(message: Message, state: FSMContext):
    dishes = await get_list_of_dishes(message.text)
    if dishes:
        await state.update_data(data=dishes)
        await message.answer('–í–æ—Ç —á—Ç–æ –º–Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏!', reply_markup=create_kb(1, *dishes, '–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ '
                                                                                                      '–±–ª—é–¥–æ üç≤'))
        await state.set_state(FSM.get_recipe)
    else:
        await message.answer('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –ø–æ –¥–∞–Ω–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑...')
        await state.set_state(FSM.find_dishes)



@router.message(StateFilter(FSM.get_recipe))
async def recipe(message: Message, state: FSMContext):
    data = await state.get_data()
    recipe = await get_recipe(data.get(message.text))
    if recipe:
        await message.answer(f'{recipe}', reply_markup=create_kb(1, '–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ä–µ—Ü–µ–ø—Ç üìÉ'))
    else:
        await message.answer('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞... –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ä–µ—Ü–µ–ø—Ç',
                             reply_markup=create_kb(1, *data, '–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –±–ª—é–¥–æ üç≤'))




